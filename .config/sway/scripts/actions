#!/usr/bin/env bash

source "$(dirname "${BASH_SOURCE[0]}")"/lib.sh

term=${TERMINAL:-footclient}
float_term="${FLOAT_TERM:-$term --app-id=floating_term}"
screenrec_cache_file="${XDG_CACHE_HOME:-~/.cache}/wl-screenrec.mp4"

_recognize_text() {
    set -e
    flameshot gui --raw | tesseract - /tmp/screen2text
    $float_term -e vi /tmp/screen2text.txt
    wl-copy -n </tmp/screen2text.txt
}

_win_screenshot() {
    swaymsg -t get_tree |
        jq -j '.. | select(.type?) | select(.focused).rect | "\(.x),\(.y) \(.width)x\(.height)"' |
        grim -g - - | wl-copy && notify Screenshot Done!
}

_run_screenrec() {
    rm "$screenrec_cache_file"
    cmd="wl-screenrec --low-power=off --filename $screenrec_cache_file"
    case $1 in
        -a)
            device="$(pw-dump |
                jq -r '.[] | select(.type == "PipeWire:Interface:Metadata") | .metadata.[] | select(.key == "default.audio.sink") | .value.name')"
            full_pa_name="$device.monitor"
            $cmd --audio --audio-device "$full_pa_name"
            ;;
        *) $cmd ;;
    esac
}

_kill_screenrec() {
    if pkill --signal SIGINT wl-screenrec; then
        date="$(date +%s)"
        out="$HOME/clips/screencast_$date.mp4"
        duration="$(sleep 2; ffprobe -show_entries format=duration \
            -of default=noprint_wrappers=1:nokey=1 \
            "$screenrec_cache_file")"
        diff="$(perl -e "print $duration - 2")"

        mkdir -p ~/clips
        ffmpeg -to "$diff" -i "$screenrec_cache_file" -c copy "$out" &&
            notify "Screen recording" Done!
    else
        return 1
    fi
}

_anki() {
    case $1 in
        add)
            clipboard="$(wl-paste -p)"
            echo -e ""'"'"$clipboard"'"'"" >>~/ankilist.txt
            notify "Ankilist" ""'"'"$clipboard"'"'" was added to ankilist!"
            ;;
        clear)
            cat /dev/null >~/ankilist.txt
            notify "Ankilist" "Ankilist has been cleared!"
            ;;
    esac
}

actions=(
    'Clipboard to mpv\0icon\x1fmpv'
    'Lock screen with lid-switch inhibition\0icon\x1femblem-locked'
    'Toggle thinkpad embedded keyboard\0icon\x1fkeyboard'
    'Add a word to ankilist\0icon\x1fanki'
    'Clear ankilist\0icon\x1fanki'
    'Start/stop screen recording\0icon\x1frecord'
    'Start/stop screen recording with audio\0icon\x1frecord'
    'Toggle system theme\0icon\x1fpreferences-desktop-plasma-theme'
    'Recognize text on the screen\0icon\x1fdialog-text-and-font'
    'Flameshot\0icon\x1fflameshot'
    'Screenshot\0icon\x1fwindow_fullscreen'
    'Window screenshot\0icon\x1fwindow_fullscreen'
    'Delayed window screenshot (3 sec)\0icon\x1fwindow_fullscreen'
    'Find a file using fzf for dragon\0icon\x1ffilefind'
)

case "$(printf "%b\n" "${actions[@]}" | fuzzel --dmenu --index --layer=overlay)" in
    0) notify Mpv "Trying to open $(wl-paste)!" && mpv "$(wl-paste)" ;;
    1) systemd-inhibit --what=handle-lid-switch:sleep swaylock ;;
    2) swaymsg input "1:1:Extra_Buttons" events toggle ;;
    3) _anki add ;;
    4) _anki clear ;;
    5) _kill_screenrec || _run_screenrec ;;
    6) _kill_screenrec || _run_screenrec -a ;;
    7) theme-toggle ;;
    8) _recognize_text ;;
    9) flameshot gui -r | wl-copy ;;
    10) grim - | wl-copy && notify Screenshot Done! ;;
    11) _win_screenshot ;;
    12) sleep 3 && _win_screenshot ;;
    13) $term -F bash -c 'swaymsg -q exec "dragon -T $(nix run self#fzf)"' ;; # TODO add preview to fzf w8 for https://github.com/junegunn/fzf/issues/2544
esac
